(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )

(define make-error
  (lambda (msg)
    (cons "error" val)
  )
 )

(define ok?
  (lambda (res)
    (and (pair? res) (eq? (car res) "ok"))
  )
 )

(define error?
  (lambda (res)
    (and (pair? res) (eq? (car res) "error"))
  )
 )

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)(cdr res)"Not a result")
  )
)

(define bind
  (lambda (f)
    (lambda (res)
        (if (ok? res) (f (result->val res) res)
    )
  )
)

(define make-dict
  (lambda ()
    (list (cons "dict"))
  )
)

(define dict?
  (lambda (e)
    (eq? (car(car e)) "dict")
  )
)

(define get
  (lambda (dict k)
    (if (eq? (car(car dict)) k) (make-ok(cdr(car dict)))
    (if (empty? (cdr dict)) (make-error "Key not found") (get (cdr dict) k))
    )
  )
)

(define put
  (lambda (dict k v)
    (if (or (eq? (car(car dict)) k) (empty? (cdr dict)))
        (if (eq? (car(car dict)) k)
            (= (cdr (car dict)) v)
        ())
    (//elseMissing))

  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
