(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )

(define make-error
  (lambda (msg)
    (cons "error" val)
  )
 )

(define ok?
  (lambda (res)
    (and (pair? res) (eq? (car res) "ok"))
  )
 )

(define error?
  (lambda (res)
    (and (pair? res) (eq? (car res) "error"))
  )
 )

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)(cdr res)"Not a result")
  )
)

(define bind
  (lambda (f)
    (lambda (res)
        (if (ok? res) (f (result->val res) res)
    )
  )
)


(define make-dict
  (lambda ()
    (list  (cons "dict" "dict"))
  )
)


(define dict?
 (lambda (e)
   (if (pair? e)
       (if (pair? (car e)) (eq? (car(car e)) "dict")
           #f)
       #f)
  )
 )

(define put-rec
  (lambda (dict k v)
    (if (eq? (car(car dict)) k)
        (if (eq? (cdr dict) null)
            (list (cons k v))
            (cons (cons k v) (cdr dict)))

        (if (eq? (cdr dict) null)
            (list (car dict) (cons k v))
            (cons (car dict) (put-rec (cdr dict) k v))
          )
       )
    )
 )

(define put
  (lambda (dict k v)
    (if (dict? dict)
        (make-ok(put-rec dict k v))
        (make-error "ERROR on procedure put: not a dict")
        )
   )
  )

(define get
  (lambda (dict k)
    (if (dict? dict)
        (get-rec dict k )
        (make-error "ERROR on procedure get: not a dict")
        )
   )
  )

(define get-rec
  (lambda (dict k)
    (if (eq? (car(car dict)) k)
        (make-ok(cdr(car dict)))
        (if (eq? (cdr dict) null)
            (make-error "Key not found")
        (get-rec (cdr dict) k)

        )
       )

    )
  )
(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
